import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from config import TOKEN
from database import init_db
from handlers.admin import (
    process_broadcast_message,
    view_bookings_handler,
    create_schedule_handler,
    create_schedule_process,
    add_service_handler,
    process_add_service,
    edit_service_handler,
    select_service_to_edit,
    process_edit_service,
    delete_service_handler,
    delete_service_confirm,
    broadcast_handler,
    broadcast_send,
    view_bookings_select_day,
    view_bookings_select_month,
    view_feedbacks_handler,
    view_schedule_handler,
    client_functions_handler
)
from handlers.user import (
    cancel_select_booking,
    feedback_handler,
    process_feedback_rating,
    process_feedback_text,
    process_reschedule_confirmation,
    send_booking_reminders,
    start_handler,
    process_first_name,
    process_last_name,
    process_phone,
    start_booking,
    select_service,
    select_month,
    select_day,
    select_time,
    my_bookings_handler,
    reschedule_handler,
    reschedule_select_booking,
    reschedule_new_month,
    reschedule_new_day,
    reschedule_new_time,
    cancel_handler,
    cancel_confirm,
    process_booking_confirmation,
    process_booking_actions,
    process_cancel_confirmation,
    process_rebooking
)
from states import AddServiceStates, BookingStates, AdminStates, CancelStates, CreateScheduleStates, DeleteServiceStates, EditServiceStates, FeedbackStates, RegistrationStates, RescheduleStates, ViewBookingsStates

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def main():
    try:
        await init_db()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")
        return

    storage = MemoryStorage()
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_handler, Command("start"))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(view_bookings_handler, lambda m: m.text == "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π")
    dp.message.register(create_schedule_handler, lambda m: m.text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    dp.message.register(add_service_handler, lambda m: m.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
    dp.message.register(edit_service_handler, lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É")
    dp.message.register(delete_service_handler, lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É")
    dp.message.register(broadcast_handler, lambda m: m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    dp.message.register(view_schedule_handler, lambda m: m.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    dp.message.register(client_functions_handler, lambda m: m.text == "üìã –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    dp.message.register(view_feedbacks_handler, lambda m: m.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message.register(create_schedule_process, CreateScheduleStates.waiting_for_dates)
    dp.message.register(process_add_service, AddServiceStates.waiting_for_data)
    dp.message.register(select_service_to_edit, EditServiceStates.waiting_for_service)
    dp.message.register(process_edit_service, EditServiceStates.waiting_for_new_data)
    dp.message.register(delete_service_confirm, DeleteServiceStates.waiting_for_service)
    dp.message.register(view_bookings_select_month, ViewBookingsStates.waiting_for_month)
    dp.message.register(view_bookings_select_day, ViewBookingsStates.waiting_for_day)
    dp.message.register(process_broadcast_message, AdminStates.waiting_for_broadcast_message)
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(start_booking, lambda m: m.text == "üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")
    dp.message.register(my_bookings_handler, lambda m: m.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
    dp.message.register(reschedule_handler, lambda m: m.text == "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å")
    dp.message.register(cancel_handler, lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
    dp.message.register(feedback_handler, lambda m: m.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    dp.message.register(cancel_select_booking, CancelStates.waiting_for_booking)
    dp.message.register(cancel_confirm, CancelStates.waiting_for_confirmation)
    dp.message.register(process_feedback_text, FeedbackStates.waiting_for_feedback_text)
    dp.message.register(process_feedback_rating, FeedbackStates.waiting_for_feedback_rating)
    dp.callback_query.register(process_cancel_confirmation, CancelStates.waiting_for_confirmation)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.message.register(process_first_name, RegistrationStates.waiting_for_first_name)
    dp.message.register(process_last_name, RegistrationStates.waiting_for_last_name)
    dp.message.register(process_phone, RegistrationStates.waiting_for_phone)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
    dp.message.register(select_service, BookingStates.waiting_for_service)
    dp.message.register(select_month, BookingStates.waiting_for_month)
    dp.message.register(select_day, BookingStates.waiting_for_day)
    dp.message.register(select_time, BookingStates.waiting_for_time)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
    dp.message.register(reschedule_select_booking, RescheduleStates.waiting_for_booking)
    dp.message.register(reschedule_new_month, RescheduleStates.waiting_for_new_month)
    dp.message.register(reschedule_new_day, RescheduleStates.waiting_for_new_day)
    dp.message.register(reschedule_new_time, RescheduleStates.waiting_for_new_time)
    
    # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(reschedule_select_booking, lambda c: c.data.startswith('select_reschedule_')) 
    dp.callback_query.register(process_booking_confirmation, lambda c: c.data.startswith(('confirm_', 'cancel_')))
    dp.callback_query.register(process_booking_actions, lambda c: c.data.startswith(('reschedule_', 'cancel_')))
    dp.callback_query.register(process_cancel_confirmation, lambda c: c.data.startswith('confirm_cancel_') or c.data == 'keep_booking')
    dp.callback_query.register(process_rebooking, lambda c: c.data.startswith('rebook_'))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = AsyncIOScheduler()
    # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler.add_job(
        send_booking_reminders,
        'interval',
        minutes=30,
        args=[bot],  # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        next_run_time=datetime.now()
    )
    scheduler.start()

    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        scheduler.shutdown()
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())