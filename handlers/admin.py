import asyncio
import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Tuple

from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, and_, exists, delete
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from database import SessionLocal
from models import Feedback, User, Service, Schedule, Booking
from states import (
    CreateScheduleStates, 
    AddServiceStates, 
    EditServiceStates,
    DeleteServiceStates, 
    AdminStates,
    ViewBookingsStates
)
from keyboards import (
    get_admin_keyboard, 
    get_cancel_keyboard,
    get_days_keyboard_for_month,
    get_months_keyboard, 
    get_services_keyboard,
    get_client_keyboard, 
    get_confirm_keyboard
)
from config import ADMIN_ID

logger = logging.getLogger(__name__)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def parse_time_slot(time_str: str) -> Optional[Tuple[int, int]]:
    try:
        hour, minute = map(int, time_str.split(':'))
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            return hour, minute
        return None
    except ValueError:
        return None

def parse_date_part(date_str: str) -> Optional[Tuple[int, int, int]]:
    parts = date_str.split('.')
    current_year = datetime.now().year
    
    try:
        if len(parts) == 2:  # –î–î.–ú–ú
            day, month = map(int, parts)
            year = current_year
        elif len(parts) == 3:  # –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì
            day, month = map(int, parts[:2])
            year = int(parts[2])
            if year < 100:  # –î–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥
                year += 2000 if year < 50 else 1900
        else:
            return None
        
        datetime(year=year, month=month, day=day)
        return day, month, year
    except (ValueError, IndexError):
        return None

def is_valid_date(date_str: str) -> bool:
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def view_bookings_handler(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
        reply_markup=await get_months_keyboard(admin_mode=True)
    )
    await state.set_state(ViewBookingsStates.waiting_for_month)

async def view_bookings_select_month(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_admin_keyboard())
        return
    
    await state.update_data(month=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
        reply_markup=await get_days_keyboard_for_month(message.text, admin_mode=True)
    )
    await state.set_state(ViewBookingsStates.waiting_for_day)

async def view_bookings_select_day(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞
        data = await state.get_data()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
            reply_markup=await get_months_keyboard(admin_mode=True)
        )
        await state.set_state(ViewBookingsStates.waiting_for_month)
        return
    
    try:
        day_date = datetime.strptime(message.text, '%d.%m.%Y').date()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    async with SessionLocal() as session:
        bookings = await session.execute(
            select(Booking, User, Service)
            .join(User)
            .join(Service)
            .where(func.date(Booking.date) == day_date)
            .order_by(Booking.date)
        )
        
        bookings = bookings.all()
        
        response = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {day_date.strftime('%d.%m.%Y')}:\n\n"
        if not bookings:
            response = f"–ù–∞ {day_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        
        for booking, user, service in bookings:
            response += (
                f"‚è∞ –í—Ä–µ–º—è: {booking.date.strftime('%H:%M')}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                f"üíà –£—Å–ª—É–≥–∞: {service.name} ({service.price}‚ÇΩ)\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if booking.confirmed else 'üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}\n"
                f"ID –∑–∞–ø–∏—Å–∏: {booking.id}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        back_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(response, reply_markup=back_keyboard)

async def create_schedule_handler(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "02.04 10:00 12:00 14:00 16:00 18:00\n"
        "03.04 10:00 12:00 14:00\n\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(CreateScheduleStates.waiting_for_dates)

async def create_schedule_process(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard())
        return
    
    parts = [p.strip() for p in message.text.split() if p.strip()]
    current_date = None
    created_slots = 0
    errors = []
    
    async with SessionLocal() as session:
        for part in parts:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç—ã –ø–∞—Ä—Å—è—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            date_parts = parse_date_part(part)
            if date_parts:
                day, month, year = date_parts
                try:
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≥–æ–¥–∞ –¥–ª—è –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    if year < 100:
                        current_century = datetime.now().year // 100 * 100
                        year += current_century
                    current_date = datetime(int(year), int(month), int(day))
                    continue
                except ValueError as e:
                    errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {part} ({str(e)})")
                    continue
            
            time_parts = parse_time_slot(part)
            if time_parts:
                if current_date is None:
                    errors.append(f"–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –≤—Ä–µ–º–µ–Ω–µ–º: {part}")
                    continue
                
                hour, minute = time_parts
                try:
                    slot_datetime = current_date.replace(hour=hour, minute=minute)
                    
                    if slot_datetime < datetime.now():
                        errors.append(f"–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ: {part}")
                        continue
                    
                    existing = await session.execute(
                        select(Schedule).where(Schedule.date == slot_datetime)
                    )
                    if not existing.scalar():
                        session.add(Schedule(date=slot_datetime))
                        created_slots += 1
                except ValueError as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ {part}: {str(e)}")
                    continue
            else:
                errors.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {part}")
                continue
        
        await session.commit()
    
    response = []
    if created_slots > 0:
        response.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {created_slots} –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    else:
        response.append("‚ö† –ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤")
    
    if errors:
        response.append("\n–û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        response.extend(errors[:5])
        if len(errors) > 5:
            response.append(f"... –∏ –µ—â—ë {len(errors)-5} –æ—à–∏–±–æ–∫")
    
    await state.clear()
    await message.answer("\n".join(response), reply_markup=get_admin_keyboard())

async def add_service_handler(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ - –¶–µ–Ω–∞ - –û–ø–∏—Å–∞–Ω–∏–µ\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç—Ä–∏–∂–∫–∞ - 1000 - –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddServiceStates.waiting_for_data)

async def process_add_service(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard())
        return
    
    try:
        name, price, description = map(str.strip, message.text.split('-', 2))
        async with SessionLocal() as session:
            session.add(Service(name=name, price=price, description=description))
            await session.commit()
        await message.answer(
            f"–£—Å–ª—É–≥–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_cancel_keyboard()
        )
    finally:
        await state.clear()

async def edit_service_handler(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    keyboard = await get_services_keyboard()
    if not keyboard:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(EditServiceStates.waiting_for_service)

async def select_service_to_edit(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard())
        return
    
    service_name = message.text.split(' - ')[0]
    await state.update_data(service_name=service_name)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ù–æ–≤–∞—è —Ü–µ–Ω–∞ - –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditServiceStates.waiting_for_new_data)

async def process_edit_service(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard())
        return
    
    data = await state.get_data()
    service_name = data['service_name']
    
    async with SessionLocal() as session:
        service = await session.execute(
            select(Service).where(Service.name == service_name)
        )
        service = service.scalars().first()
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        try:
            new_name, new_price, new_description = map(str.strip, message.text.split('-', 2))
            
            if new_name != '-':
                service.name = new_name
            if new_price != '-':
                service.price = new_price
            if new_description != '-':
                service.description = new_description
            
            await session.commit()
            await message.answer(
                f"–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service.name}\n"
                f"–¶–µ–Ω–∞: {service.price}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {service.description}",
                reply_markup=get_admin_keyboard()
            )
        except Exception as e:
            await message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=get_cancel_keyboard()
            )
        finally:
            await state.clear()

async def delete_service_handler(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    keyboard = await get_services_keyboard()
    if not keyboard:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(DeleteServiceStates.waiting_for_service)

async def delete_service_confirm(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard())
        return
    
    service_name = message.text.split(' - ')[0]
    
    async with SessionLocal() as session:
        service = await session.execute(
            select(Service).where(Service.name == service_name)
        )
        service = service.scalars().first()
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        bookings = await session.execute(
            select(Booking).where(Booking.service_id == service.id)
        )
        
        if bookings.scalars().first():
            await message.answer(
                "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏. "
                "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É.",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()
            return
        
        await session.delete(service)
        await session.commit()
    
    await state.clear()
    await message.answer(
        f"–£—Å–ª—É–≥–∞ '{service_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=get_admin_keyboard()
    )

async def start_broadcast(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id != ADMIN_ID:  # ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return
    
    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)

async def process_broadcast_message(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return
    
    data = await state.get_data()
    start_time = data.get('start_time', datetime.now())
    
    try:
        async with SessionLocal() as session:
            users = await session.execute(
                select(User.telegram_id).where(User.telegram_id != str(ADMIN_ID))
            )
            users = users.scalars().all()
        
        success = 0
        failed = []
        
        for user_id in users:
            try:
                await bot.send_message(
                    chat_id=int(user_id),
                    text=message.html_text if hasattr(message, 'html_text') else message.text,
                    parse_mode="HTML"
                )
                success += 1
                await asyncio.sleep(0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤ Telegram
            except Exception as e:
                failed.append(str(user_id))
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        
        time_spent = (datetime.now() - start_time).total_seconds()
        
        report = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚Ä¢ –û—à–∏–±–∫–∏: {len(failed)}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {time_spent:.2f} —Å–µ–∫.\n\n"
            f"–ü–µ—Ä–≤—ã–µ 10 ID —Å –æ—à–∏–±–∫–∞–º–∏:\n{', '.join(failed[:10])}{'...' if len(failed) > 10 else ''}"
        )
        
        await message.answer(report, reply_markup=get_admin_keyboard())
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())
    
    finally:
        await state.clear()
        
async def broadcast_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=get_admin_keyboard())
        return
    
    await state.update_data(start_time=datetime.now())
    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)

async def broadcast_send(message: types.Message, state: FSMContext):
    bot = message.bot
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return
    
    async with SessionLocal() as session:
        users = await session.execute(select(User))
        users = users.scalars().all()
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
                )
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                failed += 1
    
    await state.clear()
    await message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=get_admin_keyboard()
    )

async def view_schedule_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    async with SessionLocal() as session:
        dates = await session.execute(
            select(Schedule.date)
            .where(Schedule.date >= datetime.now())
            .order_by(Schedule.date)
        )
        
        dates = dates.scalars().all()
        
        if not dates:
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –∏–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã —É–∂–µ –ø—Ä–æ—à–ª–∏")
            return
        
        schedule_by_date = {}
        for slot in dates:
            date_str = slot.strftime('%d.%m.%Y')
            time_str = slot.strftime('%H:%M')
            if date_str not in schedule_by_date:
                schedule_by_date[date_str] = []
            schedule_by_date[date_str].append(time_str)
        
        response = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        for date, times in schedule_by_date.items():
            response += f"üìÖ <b>{date}</b>:\n"
            for time in sorted(times):
                response += f"  - {time}\n"
            response += "\n"
        
        booked_slots = await session.execute(
            select(Booking.date)
            .where(Booking.date >= datetime.now(), Booking.confirmed == True)
        )
        booked_slots = {slot.strftime('%d.%m.%Y %H:%M') for slot in booked_slots.scalars()}
        
        total_slots = len(dates)
        booked_count = len(booked_slots)
        free_slots = total_slots - booked_count
        
        response += (
            f"\n‚ÑπÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {total_slots}\n"
            f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {booked_count}\n"
            f"–°–≤–æ–±–æ–¥–Ω–æ: {free_slots}"
        )
        
        await message.answer(response, parse_mode='HTML')

async def client_functions_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await message.answer(
        "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º",
        reply_markup=get_client_keyboard()
    )

async def view_feedbacks_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    async with SessionLocal() as session:
        try:
            feedbacks = await session.execute(
                select(Feedback, User)
                .join(User)
                .order_by(Feedback.created_at.desc())
                .limit(10)
            )
            
            if not feedbacks:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
                return
                
            response = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
            for feedback, user in feedbacks:
                response += (
                    f"üë§ {user.first_name} {user.last_name}\n"
                    f"‚≠ê –û—Ü–µ–Ω–∫–∞: {feedback.rating}/5\n"
                    f"üìÑ –¢–µ–∫—Å—Ç: {feedback.text}\n"
                    f"üìÖ –î–∞—Ç–∞: {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                )
            
            await message.answer(response, parse_mode="HTML")
            
        except Exception as e:
            logging.error(f"Error fetching feedbacks: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤")