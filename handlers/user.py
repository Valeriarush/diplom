# handlers/user.py
from email import message
import re
import logging
from datetime import datetime, timedelta
import stat
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, and_, exists
from sqlalchemy.orm import joinedload
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from states import FeedbackStates
from database import SessionLocal
from models import Feedback, User, Service, Booking, Schedule
from states import (
    RegistrationStates, BookingStates,
    RescheduleStates, CancelStates
)
from keyboards import (
    get_client_keyboard, get_admin_keyboard,
    get_cancel_keyboard, get_months_keyboard, get_services_keyboard,
    get_days_keyboard_for_month, get_times_keyboard,
    get_confirm_keyboard, get_user_bookings_keyboard,
)
from config import ADMIN_ID

logger = logging.getLogger(__name__)

def is_valid_name(name: str) -> bool:
    return 2 <= len(name) <= 50 and name.isalpha()

def is_valid_phone(phone: str) -> bool:
    return re.match(r'^\+?[1-9]\d{10,14}$', phone) is not None

def is_valid_date(date_str: str) -> bool:
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def is_valid_time(time_str: str) -> bool:
    try:
        datetime.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False

def can_modify_booking(booking_date: datetime) -> bool:
    return (booking_date - datetime.now()) > timedelta(hours=24)

async def start_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_admin_keyboard())
        return
    
    async with SessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = user.scalars().first()
        
        if user:
            await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=get_client_keyboard())
            return
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_first_name)

async def process_first_name(message: types.Message, state: FSMContext):
    if not is_valid_name(message.text):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
        
    await state.update_data(first_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.waiting_for_last_name)

async def process_last_name(message: types.Message, state: FSMContext):
    if not is_valid_name(message.text):
        await message.answer("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
        
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79998887766:")
    await state.set_state(RegistrationStates.waiting_for_phone)

async def process_phone(message: types.Message, state: FSMContext):
    if not is_valid_phone(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    data = await state.get_data()
    async with SessionLocal() as session:
        user = User(
            telegram_id=str(message.from_user.id),
            first_name=data['first_name'],
            last_name=data['last_name'],
            phone=message.text
        )
        session.add(user)
        await session.commit()
    
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É.",
        reply_markup=get_client_keyboard()
    )

async def start_booking(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=await get_services_keyboard()
    )
    await state.set_state(BookingStates.waiting_for_service)

async def select_service(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_keyboard())
        return
    
    try:
        service_name = message.text.split(' - ')[0]
    except IndexError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞")
        return
    
    async with SessionLocal() as session:
        service = await session.execute(select(Service).where(Service.name == service_name))
        service = service.scalars().first()
        
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return
        
        await state.update_data(service_id=service.id, service_name=service.name)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=await get_months_keyboard()
        )
        await state.set_state(BookingStates.waiting_for_month)

async def select_month(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(BookingStates.waiting_for_service)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=await get_services_keyboard()
        )
        return
    
    await state.update_data(month=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=await get_days_keyboard_for_month(message.text)
    )
    await state.set_state(BookingStates.waiting_for_day)

async def select_day(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=await get_months_keyboard()
        )
        await state.set_state(BookingStates.waiting_for_month)
        return
    
    if not is_valid_date(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(day=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=await get_times_keyboard(message.text)
    )
    await state.set_state(BookingStates.waiting_for_time)

async def select_time(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥":
            data = await state.get_data()
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
                reply_markup=await get_days_keyboard_for_month(data['month'])
            )
            await state.set_state(BookingStates.waiting_for_day)
            return
        
        if not is_valid_time(message.text):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        
        data = await state.get_data()
        selected_datetime = datetime.strptime(
            f"{data['day']} {message.text}", '%d.%m.%Y %H:%M'
        )
        
        async with SessionLocal() as session:
            async with session.begin():  # –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
                schedule_slot = await session.execute(
                    select(Schedule)
                    .where(Schedule.date == selected_datetime)
                    .with_for_update()  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                )
                schedule_slot = schedule_slot.scalars().first()
                
                if not schedule_slot:
                    await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
                    return
                
                existing_booking = await session.execute(
                    select(Booking)
                    .where(
                        Booking.schedule_id == schedule_slot.id,
                        Booking.confirmed == True
                    )
                )
                
                if existing_booking.scalars().first():
                    await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ")
                    return
                
                user = await session.execute(
                    select(User).where(User.telegram_id == str(message.from_user.id))
                )
                user = user.scalars().first()
                
                booking = Booking(
                    date=selected_datetime,
                    user_id=user.id,
                    service_id=data['service_id'],
                    confirmed=True,
                    schedule_id=schedule_slot.id
                )
                session.add(booking)
                
                await message.answer(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {data['service_name']}!\n"
                    f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {selected_datetime.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=get_client_keyboard()
                )
            
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def my_bookings_handler(message: types.Message):
    async with SessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = user.scalars().first()
        
        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        bookings = await session.execute(
            select(Booking, Service)
            .join(Service)
            .where(
                Booking.user_id == user.id,
                Booking.date >= datetime.now()
            )
            .order_by(Booking.date)
        )
        
        bookings = bookings.all()
        
        if not bookings:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", reply_markup=get_client_keyboard())
            return
        
        response = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for booking, service in bookings:
            status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if booking.confirmed else "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            response += (
                f"<b>üîπ –£—Å–ª—É–≥–∞:</b> {service.name}\n"
                f"<b>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {booking.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"<b>ID –∑–∞–ø–∏—Å–∏:</b> {booking.id}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )
        
        await message.answer(
            response,
            reply_markup=get_client_keyboard(),
            parse_mode='HTML'
        )

async def process_booking_actions(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏ (–ø–µ—Ä–µ–Ω–æ—Å/–æ—Ç–º–µ–Ω–∞)"""
    action, booking_id = callback_query.data.split('_')
    booking_id = int(booking_id)
    
    async with SessionLocal() as session:
        booking = await session.execute(
            select(Booking, Service)
            .join(Service)
            .where(Booking.id == booking_id)
        )
        booking, service = booking.first()
        
        if not booking or booking.user.telegram_id != str(callback_query.from_user.id):
            await callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if action == 'reschedule':
            if not can_modify_booking(booking.date):
                await callback_query.answer("–ü–µ—Ä–µ–Ω–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏")
                return
            
            await state.update_data(
                booking_id=booking.id,
                service_id=booking.service_id
            )
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                reply_markup=await get_months_keyboard()
            )
            await state.set_state(RescheduleStates.waiting_for_new_month)
            
        elif action == 'cancel':
            if not can_modify_booking(booking.date):
                await callback_query.answer("–û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏")
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=f"confirm_cancel_{booking.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å",
                        callback_data="keep_booking"
                    )
                ]
            ])
            
            await callback_query.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {service.name} "
                f"({booking.date.strftime('%d.%m.%Y %H:%M')})?",
                reply_markup=keyboard
            )
        
        await callback_query.answer()

async def process_cancel_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "keep_booking":
        await callback_query.message.edit_text("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback_query.answer()
        return
    
    _, booking_id = callback_query.data.split('_')
    booking_id = int(booking_id)
    
    async with SessionLocal() as session:
        booking = await session.get(Booking, booking_id)
        if booking:
            # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
            booking.confirmed = False
            await session.commit()

async def process_rebooking(callback_query: types.CallbackQuery, state: FSMContext):
    service_id = int(callback_query.data.split('_')[1])
    
    async with SessionLocal() as session:
        service = await session.get(Service, service_id)
        if service:
            await state.update_data(
                service_id=service.id,
                service_name=service.name
            )
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                reply_markup=await get_months_keyboard()
            )
            await state.set_state(BookingStates.waiting_for_month)
    
    await callback_query.answer()

async def can_perform_action(user: User, action_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
    current_month = datetime.now().month
    
    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    if user.last_action_month != current_month:
        user.reschedules_this_month = 0
        user.cancels_this_month = 0
        user.last_action_month = current_month
        return True
    
    if action_type == 'reschedule':
        return user.reschedules_this_month < 1
    elif action_type == 'cancel':
        return user.cancels_this_month < 1
    return False

async def reschedule_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å'"""
    async with SessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = user.scalars().first()
        
        current_month = datetime.now().month
        if user.last_action_month != current_month:
            user.reschedules_this_month = 0
            user.last_action_month = current_month
            await session.commit()
        
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º
        if user.reschedules_this_month >= 1:
            await message.answer(
                "‚ùå –õ–∏–º–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –∏—Å—á–µ—Ä–ø–∞–Ω (1/1)",
                reply_markup=get_client_keyboard()
            )
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–∞–ø–∏—Å–∏
        keyboard = await get_user_bookings_keyboard(message.from_user.id)
        if not keyboard:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞", 
                              reply_markup=get_client_keyboard())
            return
        
        await message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
            reply_markup=keyboard
        )
        await state.set_state(RescheduleStates.waiting_for_booking)

async def process_reschedule_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    if message.text == "‚ùå –ù–µ—Ç":
        await state.clear()
        await message.answer(
            "–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_client_keyboard()
        )
        return
    
    if message.text != "‚úÖ –î–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        return
    
    async with SessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = user.scalars().first()
        
        if user.reschedules_this_month >= 1:
            await message.answer(
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
                reply_markup=get_client_keyboard()
            )
            await state.clear()
            return
        
        keyboard = await get_user_bookings_keyboard(message.from_user.id)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
            reply_markup=keyboard
        )
        await state.set_state(RescheduleStates.waiting_for_booking)

async def reschedule_select_booking(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_keyboard())
        return
    
    try:
        booking_id = int(message.text.split(':')[0].strip())
    except (ValueError, IndexError):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    async with SessionLocal() as session:
        booking = await session.execute(
            select(Booking)
            .options(
                joinedload(Booking.user),
                joinedload(Booking.service)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ service –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏
            )
            .where(Booking.id == booking_id)
        )
        booking = booking.scalars().first()
        
        if not booking or booking.user.telegram_id != str(message.from_user.id):
            await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            await state.clear()
            return
        
        if not can_modify_booking(booking.date):
            await message.answer("–ü–µ—Ä–µ–Ω–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏")
            await state.clear()
            return
        
        await state.update_data(
            booking_id=booking.id,
            service_id=booking.service.id,
            service_name=booking.service.name,
            old_date=booking.date
        )
        
        await message.answer(
            f"–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ {booking.service.name}\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü:",
            reply_markup=await get_months_keyboard()
        )
        await state.set_state(RescheduleStates.waiting_for_new_month)

async def reschedule_new_month(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(RescheduleStates.waiting_for_booking)
        keyboard = await get_user_bookings_keyboard(message.from_user.id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:", reply_markup=keyboard)
        return
    
    await state.update_data(month=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
        reply_markup=await get_days_keyboard_for_month(message.text)
    )
    await state.set_state(RescheduleStates.waiting_for_new_day)

async def reschedule_new_day(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(RescheduleStates.waiting_for_new_month)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
            reply_markup=await get_months_keyboard()
        )
        return
    
    if not is_valid_date(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(day=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
        reply_markup=await get_times_keyboard(message.text)
    )
    await state.set_state(RescheduleStates.waiting_for_new_time)  

async def reschedule_new_time(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
            reply_markup=await get_days_keyboard_for_month(data['month'])
        )
        await state.set_state(RescheduleStates.waiting_for_new_day)
        return
    
    if not is_valid_time(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    data = await state.get_data()
    
    async with SessionLocal() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ–π –∑–∞–ø–∏—Å–∏
            old_booking = await session.get(Booking, data['booking_id'])
            if not old_booking:
                await message.answer("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
            day_str = data['day'] if len(data['day'].split('.')) == 3 else f"{data['day']}.{datetime.now().year}"
            new_datetime = datetime.strptime(f"{day_str} {message.text}", '%d.%m.%Y %H:%M')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
            new_schedule_slot = await session.execute(
                select(Schedule)
                .where(Schedule.date == new_datetime)
            )
            new_schedule_slot = new_schedule_slot.scalars().first()
            
            if not new_schedule_slot:
                await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            existing_booking = await session.execute(
                select(Booking)
                .where(
                    Booking.schedule_id == new_schedule_slot.id,
                    Booking.confirmed == True
                )
            )
            
            if existing_booking.scalars().first():
                await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ")
                return

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å (–∏–ª–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é)
            await session.delete(old_booking)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_booking = Booking(
                date=new_datetime,
                user_id=old_booking.user_id,
                service_id=old_booking.service_id,
                confirmed=True,
                schedule_id=new_schedule_slot.id
            )
            session.add(new_booking)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, old_booking.user_id)
            if user.last_action_month != datetime.now().month:
                user.reschedules_this_month = 0
                user.last_action_month = datetime.now().month
            user.reschedules_this_month += 1
            
            await session.commit()
            
            await state.clear()
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_datetime.strftime('%d.%m.%Y %H:%M')}!",
                reply_markup=get_client_keyboard()
            )
            
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏: {str(e)}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

async def cancel_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    try:
        async with SessionLocal() as session:
            # –Ø–≤–Ω–æ–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with session.begin():
                user = await session.execute(
                    select(User)
                    .where(User.telegram_id == str(message.from_user.id))
                    .execution_options(no_cache=True)
                )
                user = user.scalars().first()

                if not user:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                now = datetime.now()
                bookings = await session.execute(
                    select(Booking, Service)
                    .join(Service)
                    .where(
                        Booking.user_id == user.id,
                        Booking.date >= now,
                        Booking.confirmed == True
                    )
                    .order_by(Booking.date)
                )
                
                bookings = bookings.all()

                if not bookings:
                    await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(
                            text=f"{booking.id}: {service.name} –Ω–∞ {booking.date.strftime('%d.%m.%Y %H:%M')}"
                        )]
                        for booking, service in bookings
                    ] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )

                await message.answer(
                    "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                    reply_markup=keyboard
                )
                await state.set_state(CancelStates.waiting_for_booking)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_handler: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_client_keyboard()
        )

async def process_cancel_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã"""
    if message.text == "‚ùå –ù–µ—Ç":
        await state.clear()
        await message.answer(
            "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_client_keyboard()
        )
        return
    
    if message.text != "‚úÖ –î–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        return
    
    async with SessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = user.scalars().first()
        
        if user.cancels_this_month >= 1:
            await message.answer(
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –æ—Ç–º–µ–Ω –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
                reply_markup=get_client_keyboard()
            )
            await state.clear()
            return
        
        keyboard = await get_user_bookings_keyboard(message.from_user.id)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=keyboard
        )
        await state.set_state(CancelStates.waiting_for_booking)

async def cancel_select_booking(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_client_keyboard())
        return
    
    try:
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ID –∑–∞–ø–∏—Å–∏
        parts = message.text.split(':')
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏")
        
        booking_id = int(parts[0].strip())
        service_info = parts[1].strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if not service_info or not str(booking_id).isdigit():
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        async with SessionLocal() as session:
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞
                booking = await session.execute(
                    select(Booking)
                    .options(joinedload(Booking.service))
                    .join(User)
                    .where(
                        Booking.id == booking_id,
                        User.telegram_id == str(message.from_user.id)
                    )
                )
                booking = booking.scalars().first()
                
                if not booking:
                    await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                    await state.clear()
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ (–Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º)
                if booking.date < datetime.now():
                    await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –∑–∞–ø–∏—Å—å")
                    await state.clear()
                    return
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (–Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞)
                if (booking.date - datetime.now()) <= timedelta(hours=24):
                    await message.answer(
                        "‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏",
                        reply_markup=get_client_keyboard()
                    )
                    await state.clear()
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await state.update_data(booking_id=booking.id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                service_name = booking.service.name if booking.service else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
                booking_time = booking.date.strftime('%d.%m.%Y %H:%M')
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
                        [KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                
                await message.answer(
                    f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
                    f"üîπ –£—Å–ª—É–≥–∞: {service_name}\n"
                    f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking_time}\n\n"
                    f"–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.",
                    reply_markup=keyboard
                )
                await state.set_state(CancelStates.waiting_for_confirmation)
                
    except ValueError as e:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            reply_markup=get_client_keyboard()
        )
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {str(e)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_client_keyboard()
        )
        await state.clear()

async def cancel_confirm(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    if message.text == "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await state.clear()
        await message.answer(
            "‚úÖ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_client_keyboard()
        )
        return

    if message.text != "‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return

    try:
        data = await state.get_data()
        booking_id = data.get('booking_id')
        
        if not booking_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø–∏—Å–∏")
            await state.clear()
            return

        async with SessionLocal() as session:
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                booking = await session.execute(
                    select(Booking)
                    .join(User)
                    .where(
                        Booking.id == booking_id,
                        User.telegram_id == str(message.from_user.id)
                    )
                    .with_for_update()
                )
                booking = booking.scalars().first()

                if not booking:
                    await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    await state.clear()
                    return

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                if (booking.date - datetime.now()) <= timedelta(hours=24):
                    await message.answer(
                        "‚ö†Ô∏è –°—Ä–æ–∫ –æ—Ç–º–µ–Ω—ã –∏—Å—Ç—ë–∫ (–º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –¥–æ –∑–∞–ø–∏—Å–∏)",
                        reply_markup=get_client_keyboard()
                    )
                    await state.clear()
                    return

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
                user = await session.get(User, booking.user_id)
                current_month = datetime.now().month
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –º–µ—Å—è—Ü —Å–º–µ–Ω–∏–ª—Å—è
                if user.last_action_month != current_month:
                    user.reschedules_this_month = 0
                    user.cancels_this_month = 0
                    user.last_action_month = current_month
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ç–º–µ–Ω
                if user.cancels_this_month >= 1:
                    await message.answer(
                        "‚ö†Ô∏è –õ–∏–º–∏—Ç –æ—Ç–º–µ–Ω –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∏—Å—á–µ—Ä–ø–∞–Ω (1/1)",
                        reply_markup=get_client_keyboard()
                    )
                    await state.clear()
                    return

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await session.delete(booking)
                user.cancels_this_month += 1
                
                await message.answer(
                    "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                    reply_markup=get_client_keyboard()
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_confirm: {str(e)}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏",
            reply_markup=get_client_keyboard()
        )
    finally:
        await state.clear()

async def process_booking_confirmation(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        try:
            action, booking_id = callback_query.data.split('_')
            booking_id = int(booking_id)
        except ValueError:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return

        async with SessionLocal() as session:
            async with session.begin():  # –Ø–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                booking = await session.execute(
                    select(Booking)
                    .options(joinedload(Booking.service))  # –ñ–∞–¥–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ service
                    .where(Booking.id == booking_id)
                    .join(User)
                    .where(User.telegram_id == str(callback_query.from_user.id))
                    .with_for_update()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                )
                booking = booking.scalars().first()

                if not booking:
                    await callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤")
                    return

                if action == 'confirm':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω–æ
                    schedule_available = await session.execute(
                        select(exists().where(
                            Schedule.id == booking.schedule_id,
                            ~exists().where(
                                Booking.schedule_id == booking.schedule_id,
                                Booking.confirmed == True,
                                Booking.id != booking.id
                            )
                        ))
                    )
                    if not schedule_available.scalar():
                        await callback_query.message.edit_text(
                            "‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —Å—Ç–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
                        )
                        await callback_query.answer()
                        return

                    booking.confirmed = True
                    response_text = (
                        f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {booking.service.name} "
                        f"({booking.date.strftime('%d.%m.%Y %H:%M')}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
                    )
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã
                    if (booking.date - datetime.now()) <= timedelta(hours=24):
                        await callback_query.message.edit_text(
                            "‚ùå –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏"
                        )
                        await callback_query.answer()
                        return

                    await session.delete(booking)
                    response_text = (
                        f"‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ {booking.service.name} "
                        f"({booking.date.strftime('%d.%m.%Y %H:%M')}) –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    )

                await callback_query.message.edit_text(response_text)
                await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_booking_confirmation: {str(e)}", exc_info=True)
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def feedback_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã")
        return
        
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(FeedbackStates.waiting_for_feedback_text)

async def process_feedback_text(message: types.Message, state: FSMContext):
    await state.update_data(feedback_text=message.text)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –æ—Ç 1 –¥–æ 5:")
    await state.set_state(FeedbackStates.waiting_for_feedback_rating)

async def process_feedback_rating(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ - —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5
        rating = int(message.text)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é rating –∑–¥–µ—Å—å
        if rating < 1 or rating > 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
            return

        data = await state.get_data()
        feedback_text = data.get('feedback_text', '')
        
        async with SessionLocal() as session:
            user = await session.execute(
                select(User).where(User.telegram_id == str(message.from_user.id))
            )
            user = user.scalars().first()
            
            if user:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Feedback —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                new_feedback = Feedback(
                    user_id=user.id,
                    text=feedback_text,
                    rating=rating  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é rating
                )
                session.add(new_feedback)
                await session.commit()
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üíñ", reply_markup=get_client_keyboard())
            else:
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
    finally:
        await state.clear()

async def send_booking_reminders(bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö"""
    async with SessionLocal() as session:
        async with session.begin():
            try:
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
                reminder_24h_time = datetime.now() + timedelta(hours=24)
                bookings_24h = await session.execute(
                    select(Booking, User, Service)
                    .join(User)
                    .join(Service)
                    .where(
                        func.date_trunc('hour', Booking.date) == func.date_trunc('hour', reminder_24h_time),
                        Booking.reminder_24h_sent == False,
                        Booking.confirmed == True
                    )
                    .execution_options(populate_existing=True)
                )
                bookings_24h = bookings_24h.all()

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 —á–∞—Å–∞
                reminder_3h_time = datetime.now() + timedelta(hours=3)
                bookings_3h = await session.execute(
                    select(Booking, User, Service)
                    .join(User)
                    .join(Service)
                    .where(
                        func.date_trunc('hour', Booking.date) == func.date_trunc('hour', reminder_3h_time),
                        Booking.reminder_3h_sent == False,
                        Booking.confirmed == True
                    )
                )
                bookings_3h = bookings_3h.all()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞
                for booking, user, service in bookings_24h:
                    try:
                        await bot.send_message(
                            chat_id=user.telegram_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {service.name} "
                                 f"–∑–∞–≤—Ç—Ä–∞ –≤ {booking.date.strftime('%H:%M')}"
                        )
                        booking.reminder_24h_sent = True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 24h –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 3 —á–∞—Å–∞
                for booking, user, service in bookings_3h:
                    try:
                        await bot.send_message(
                            chat_id=user.telegram_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {service.name} "
                                 f"—á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ ({booking.date.strftime('%H:%M')})"
                        )
                        booking.reminder_3h_sent = True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 3h –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

                # –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–ª–æ–∫–∞
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ send_booking_reminders: {e}", exc_info=True)
                # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                raise  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ